	Installing Chorale on Windows
	=============================

Chorale for Windows comes as a binary package, and need not be
compiled each time. (If you do want to recompile it, see below; the
full source is, as required by section 6d of the GNU GPLv3, always
available from http://chorale.sf.net.)

Chorale is tested on Windows XP, but should also work on 2000 and
Vista.

In the Zip file, you get a single executable choralesvc.exe, plus, for
technical reasons, a small DLL mingwm10.dll. Chorale installation is
only half-automated: first you must copy these two files to wherever
you want Chorale to reside -- say, "Program Files\Chorale".

Then, using a command-window, run choralesvc with the "-i" or
"--install" option:

	c:
	cd \Program Files\Chorale
	choralesvc -i "<name-of-your-music-folder>"

If all is successful, a message will be printed saying so. You need to
be logged-in as an administrator user to install Chorale.

Chorale usually runs as a service -- meaning, it runs whenever Windows
is running, whether or not anyone is logged-in -- and can be started
or stopped in Control Panel / Services in the normal way. However (at
least on Windows XP) when you first install Chorale, you need to run
it *once* as a normal program in order to get Windows Firewall to
allow it to use the network:

	c:
	cd \Program Files\Chorale
	choralesvc -d

		lots of tracing information will appear, and a dialog
		box will pop-up saying "Do you want to keep blocking
		this program?"

Click on "Unblock" to reassure Windows Firewall. Then go to Control
Panel / Administrative Tools / Services, find Chorale in the list,
right-click on it, and choose Restart. Hopefully, this will all be
made automatic in a future release.

The ability to run Chorale as a normal program ("choralesvc -d")
should also be very helpful if you need to report a problem.

If you ever want to change your music folder, run "choralesvc -i"
again with the new folder; there is no need to uninstall Chorale
("choralesvc -u") first.

Currently, Chorale's install folder, and its root music folder, must
be so-called "ANSI" (non-Unicode) paths. Folders and files anywhere
*inside* the root music folder can have Unicode names, though. This
restriction will be lifted in a future release.


Rio Receiver service from Windows
---------------------------------

To serve real Rio Receivers, Chorale needs the firmware files
installed by the original Receiver server software, Rio Audio Receiver
Manager. You should install that first (instructions are included in
README.receiver.TXT), but -- as Receivers can only work with one
server at a time -- you should then disable (not uninstall) Audio
Receiver Manager by removing it from the Start->Programs->Startup
menu.

Chorale for Windows reads the registry entries left by Audio Receiver
Manager, in order to find the firmware files -- hence there is no
equivalent of Linux choraled's "-w" or "--arf" options.


Republishing Receiver servers as UPnP
-------------------------------------

Chorale 0.15 and later is capable of republishing, or gatewaying, an
existing Receiver server (such as a Rio Central) to UPnP clients (such
as Roku Soundbridge or Sony Playstation 3). To do this, use the
"--assimilate-receiver" option when installing choralesvc:

    choralesvc -i --assimilate-receiver

As the Receiver protocol only allows for one server per network, using
"--assimilate-receiver" disables Chorale's own Receiver server. (If
you supply a music-folder too, Chorale will merge the two sources of
music and supply the UPnP client with the combination.)


Modifying and recompiling Chorale for Windows
---------------------------------------------

Chorale for Windows is currently built using an i586-mingw32
cross-compiler from Linux. If you have a suitable cross-compiler installed,
the incantation is:

	tar xjf chorale-X.XX.tar.bz2
	cd chorale-X.XX
	configure --host=i586-mingw32 <any-other-options>
	make -j4

Native compilation, whether with Mingw32 or MSVC, has not been tried
-- but might work. Patches are welcome.


Installing Qt for mingw32 cross-compiler
----------------------------------------

Download qt-win-opensource-x.y.z.exe and run it under Wine. Pick an
install dir (I used /usr/i586-mingw32/qt) and let it install. When it
asks for a mingw installation, give it your cross-compiler's root
directory (in my case, /usr/i586-mingw32); it'll whinge, but let you
ignore the whinge and install anyway (do so).

You then need to arrange for Qt's pkgconfig files to be available to
the cross-compiler (the Win32 Qt doesn't have pkgconfig files). To do
this, issue the following commands (as root):

   # cd /usr/lib/pkgconfig     # Or wherever your existing QtCore.pc is
   # for i in Qt*.pc ; do sed \
		-e 's,^prefix=.*,prefix=/usr/i586-mingw32/qt,' \
		-e 's,-I.*/include,-I/usr/i586-mingw32/qt/include,' \
		-e 's,-l[^ ]*,&4,' \
	< $i > /usr/i586-mingw32/lib/pkgconfig/$i ; done
   # cp /usr/i586-mingw32/qt/bin/*.dll /usr/lib/wine/


Uninstalling Chorale for Windows
--------------------------------

Uninstallation is very much like installation:

	c:
	cd \Program Files\Chorale
	choralesvc -u

Obviously, you need to replace "C:\Program Files\Chorale" with
wherever you put choralesvc when installing it.
