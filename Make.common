# -*- Makefile -*-

ifeq ($(TARGETDIR),)
ifneq ($(PROFILE),)
DIRSUFFIX:=-profile
DEBUG:=0
else
ifneq ($(DEBUG),0)
DIRSUFFIX:=-debug
else
DIRSUFFIX:=-release
endif
endif
TARGETDIR:=obj-$(shell $(CC) -dumpmachine)$(DIRSUFFIX)/
endif

OBJS:=$(SRCS:%.cpp=$(TOP)$(DIR)%.o)
OBJS:=$(OBJS:%.c=$(TOP)$(DIR)%.o)
SOBJS:=$(SRCS:%.cpp=$(TOP)$(DIR)%.oS)
SOBJS:=$(SOBJS:%.c=$(TOP)$(DIR)%.oS)
LOBJS:=$(SRCS:%.cpp=$(TOP)$(DIR)$(TARGETDIR)%.lo)
LOBJS:=$(LOBJS:%.c=$(TOP)$(DIR)$(TARGETDIR)%.lo)
DEPS:=$(SRCS:%.cpp=$(TOP)$(DIR)$(TARGETDIR)%.lo.dep)
DEPS:=$(DEPS:%.c=$(TOP)$(DIR)$(TARGETDIR)%.lo.dep)
TESTS:=$(TEST_SRCS:%.cpp=$(TOP)$(DIR)$(TARGETDIR)%__test)
TESTS:=$(TESTS:%.c=$(TOP)$(DIR)$(TARGETDIR)%__test)
TEST_DEPS:=$(TESTS:%=%.dep)
TEST_SRCS:=

ifneq ($(DEPS) $(TEST_DEPS),)
-include $(DEPS) $(TEST_DEPS)
endif

ifeq ($(CLEANS),)
CLEANS:=$(OBJS) $(SOBJS) $(LOBJS) $(DEPS) $(TESTS)

clean:
	@echo Cleaning
	@rm -f $(CLEANS)
	@find . -name '.libs' -print0 | xargs -0 rm -rf
	@find . -name 'obj-*-*-*' -print0 | xargs -0 rm -rf
	@find . -name '*~' -o -name '*.i' -print0 | xargs -0 rm -f
else
CLEANS+=$(OBJS) $(SOBJS) $(LOBJS) $(DEPS) $(TESTS)
endif

.PHONY: tests
tests: all $(TESTS)

-include .force-header-generation

include $(TOP)Make.config

CFLAGS += -DLOCALSTATEDIR=\"$(localstatedir)\" -DDATADIR=\"$(datarootdir)\"
CXXFLAGS += -DLOCALSTATEDIR=\"$(localstatedir)\" -DDATADIR=\"$(datarootdir)\"

ifneq ($(DEBUG),0)
WITH_DEBUG:=1
CFLAGS += -DDEBUG=1 -DWITH_DEBUG -D_FORTIFY_SOURCE=2
CXXFLAGS += -DDEBUG=1 -DWITH_DEBUG -D_FORTIFY_SOURCE=2
else
WITH_DEBUG:=0
CFLAGS += -fomit-frame-pointer -DNDEBUG
CXXFLAGS += -fomit-frame-pointer -DNDEBUG
endif

ifneq ($(PROFILE),)
CFLAGS += -fno-omit-frame-pointer -pg
CXXFLAGS += -fno-omit-frame-pointer -pg
endif

ifneq ($(VERBOSE),)
CC_PRE:=
LD_PRE:=
AR_PRE:=
GEN_PRE:=
RUN_PRE:=
MOCKING_PRE:=
else
CC_PRE=@echo Compiling $< ;
LD_PRE=@echo Linking $@ ;
AR_PRE=@echo Archiving $@ ;
GEN_PRE=@echo Generating $@ ;
RUN_PRE=@echo Running $@ ;
MOCKING_PRE=@echo Mocking $< ;
endif

ifeq ($(TOPCOMMA),)
TOPCOMMA:=`echo -e $(TOP) | tr '.' ','`
endif

%.o: %.cpp
	$(CC_PRE)$(CXX) $(CXXFLAGS) -I$(TOP). \
		-c $< -o $@ -MD -MP
	@tr '.' ',' < $*.d \
		| sed -e "s| $(TOPCOMMA)\([a-z.,]\)| \$$\(TOP\)\1|g" \
		      -e "s|^$(TOPCOMMA)\([a-z.,]\)|\$$\(TOP\)\1|g" \
		| tr ',' '.' \
		> $*.dd
	@mv $*.dd $*.dep
	@rm $*.d

%.o: %.c
	$(CC_PRE)$(CC) $(CFLAGS) -I$(TOP). \
		-c $< -o $@ -MD -MP
	@tr '.' ',' < $*.d \
		| sed -e "s| $(TOPCOMMA)\([a-z.,]\)| \$$\(TOP\)\1|g" \
		      -e "s|^$(TOPCOMMA)\([a-z.,]\)|\$$\(TOP\)\1|g" \
		| tr ',' '.' \
		> $*.dd
	@mv $*.dd $*.dep
	@rm $*.d

# Qt meta-object-compiler
%.moc.cpp: %.h $(MOC)
	$(MOCKING_PRE)$(MOC) $< -o $@

.PRECIOUS: %.moc.cpp

$(TOP)$(DIR)$(TARGETDIR)%.lo: $(TOP)$(DIR)%.cpp
	@mkdir -p $(dir $@)
	$(CC_PRE)libtool --tag=CXX --mode=compile --silent \
		$(CXX) $(CXXFLAGS) -I$(TOP). -c $< -o $@ \
		-MD -MF $@.d -MT $@ -MP
	@tr '.' ',' < $@.d \
		| sed -e "s| $(TOPCOMMA)\([a-z.,]\)| \$$\(TOP\)\1|g" \
		      -e "s|^$(TOPCOMMA)\([a-z.,]\)|\$$\(TOP\)\1|g" \
		| tr ',' '.' \
		> $@.dd
	@mv $@.dd $@.dep
	@rm $@.d

$(TOP)$(DIR)$(TARGETDIR)%.lo: $(TOP)$(DIR)%.c
	@mkdir -p $(dir $@)
	$(CC_PRE)libtool --tag=CXX --mode=compile --silent \
		$(CC) $(CFLAGS) -I$(TOP). -c $< -o $@ \
		-MD -MF $@.d -MT $@ -MP
	@tr '.' ',' < $@.d \
		| sed -e "s| $(TOPCOMMA)\([a-z.,]\)| \$$\(TOP\)\1|g" \
		      -e "s|^$(TOPCOMMA)\([a-z.,]\)|\$$\(TOP\)\1|g" \
		| tr ',' '.' \
		> $@.dd
	@mv $@.dd $@.dep
	@rm $@.d

$(TOP)$(DIR)$(TARGETDIR)%__test: $(TOP)$(DIR)%.cpp
	@mkdir -p $(dir $@)
	$(CC_PRE)libtool --tag=CXX --mode=compile --silent \
		$(CXX) $(CXXFLAGS) -fprofile-arcs -ftest-coverage \
		-I$(TOP). -DTEST -DSRCROOT=\"$(SRCROOT)\" -O0 -c $< -o $@.lo \
		-MD -MF $@.d -MT $@ -MP
	@tr '.' ',' < $@.d \
		| sed -e "s| $(TOPCOMMA)\([a-z.,]\)| \$$\(TOP\)\1|g" \
		      -e "s|^$(TOPCOMMA)\([a-z.,]\)|\$$\(TOP\)\1|g" \
		| tr ',' '.' \
		> $@.dd
	@mv $@.dd $@.dep
	@rm $@.d
	$(LD_PRE)libtool --tag=CXX --mode=link --silent \
		$(CXX) $(CXXFLAGS) -fprofile-arcs -ftest-coverage \
		$@.lo $(filter %.la,$^) $(TEST_LIBS) -o $@ -Wl,-Map,$@.map
	$(RUN_PRE)$(TEST_RUN) $@ || ( echo $@ FAILED ; rm $@ ; false )
	@gcov -n -o $(dir $@).libs/$(notdir $@).cpp $< > $@.gcov.txt
	@grep -C1 $< $@.gcov.txt \
		| grep executed | head -n 1 \
		| sed -e "s,^,Covered $<: ," -e 's/ted:/ted: /'

%.s: %.cpp
	$(CXX) $(CXXFLAGS) $(TAGLIB_CXXFLAGS) $(BOOST_CXXFLAGS) -I$(TOP) -S $< -o $@ -DTEST

%.i: %.cpp
	$(CXX) $(CXXFLAGS) -I$(TOP) -E -dD -C $< -o $@ $(QT_CXXFLAGS)
