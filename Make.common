# -*- Makefile -*-

ifeq ($(TARGETDIR),)
ifneq ($(PROFILE),)
DIRSUFFIX:=-profile
DEBUG:=0
else
ifneq ($(DEBUG),0)
DIRSUFFIX:=-debug
else
DIRSUFFIX:=-release
endif
endif
TARGET:=$(shell $(CC) -dumpmachine)
FULLTARGET:=$(TARGET)$(DIRSUFFIX)
TARGETDIR:=obj-$(FULLTARGET)/
endif

ifeq ($(ALL_SRCS),)
ALL_SRCS:=$(SRCS:%.cpp=$(TOP)$(DIR)%.cpp)
else
ALL_SRCS+=$(SRCS:%.cpp=$(TOP)$(DIR)%.cpp)
endif
OBJS:=$(SRCS:%.cpp=$(TOP)$(DIR)%.o)
OBJS:=$(OBJS:%.c=$(TOP)$(DIR)%.o)
OBJS:=$(OBJS:%.mm=$(TOP)$(DIR)%.o)
SOBJS:=$(SRCS:%.cpp=$(TOP)$(DIR)%.oS)
SOBJS:=$(SOBJS:%.c=$(TOP)$(DIR)%.oS)
SOBJS:=$(SOBJS:%.mm=$(TOP)$(DIR)%.oS)
LOBJS:=$(SRCS:%.cpp=$(TOP)$(DIR)$(TARGETDIR)%.lo)
LOBJS:=$(LOBJS:%.c=$(TOP)$(DIR)$(TARGETDIR)%.lo)
LOBJS:=$(LOBJS:%.mm=$(TOP)$(DIR)$(TARGETDIR)%.lo)
DEPS:=$(SRCS:%.cpp=$(TOP)$(DIR)$(TARGETDIR)%.lo.dep)
DEPS:=$(DEPS:%.c=$(TOP)$(DIR)$(TARGETDIR)%.lo.dep)
DEPS:=$(DEPS:%.mm=$(TOP)$(DIR)$(TARGETDIR)%.lo.dep)
# Test last-modified file first
TESTS:=$(TEST_SRCS:%.cpp=$(TOP)$(DIR)%.cpp)
TESTS:=$(TESTS:%.c=$(TOP)$(DIR)%.c)
ifneq ($(TESTS),)
TESTS:=$(shell ls -t $(TESTS))
endif
ifeq ($(TEST_SUFFIX),)
TEST_SUFFIX:=test
endif
TESTS:=$(TESTS:$(TOP)$(DIR)%.cpp=$(TOP)$(DIR)$(TARGETDIR)%__$(TEST_SUFFIX)$(DOTEXE))
TESTS:=$(TESTS:$(TOP)$(DIR)%.c=$(TOP)$(DIR)$(TARGETDIR)%__$(TEST_SUFFIX)$(DOTEXE))
TEST_DEPS:=$(TESTS:%=%.dep)
TEST_SRCS:=

ifneq ($(DEPS) $(TEST_DEPS),)
-include $(DEPS) $(TEST_DEPS)
endif

ifeq ($(CLEANS),)
CLEANS:=$(OBJS) $(SOBJS) $(LOBJS) $(DEPS) $(TESTS)

clean:
	@echo Cleaning
	@rm -f $(CLEANS)
	@find . -name '.libs' -print0 | xargs -0 rm -rf
	@find . -name 'obj-*-*-*' -print0 | xargs -0 rm -rf
	@find . -name '*.all-*-*-*.[hi]' -print0 | xargs -0 rm -rf
	@find . -name '*~' -o -name '*.i' -o -name '*.gcov' -print0 | xargs -0 rm -f

vtests:
	$(MAKE) tests TEST_RUN="valgrind --error-exitcode=99 --leak-check=full $(VALGRIND_OPTS) --db-attach=yes" TEST_SUFFIX=vtest

ptests:
	$(MAKE) tests TEST_RUN="valgrind --tool=exp-ptrcheck --error-exitcode=99" TEST_SUFFIX=ptest

else
CLEANS+=$(OBJS) $(SOBJS) $(LOBJS) $(DEPS) $(TESTS)
endif

.PHONY: tests localtests
tests: all $(TESTS)

ifeq ($(DONE_LOCALTESTS),)
localtests: all $(TESTS)

DONE_LOCALTESTS=yup
endif

-include .force-header-generation

all: .force-header-generation

.PHONY: all

.force-header-generation:

.PHONY: .force-header-generation

ifeq ($(CHORALE_VERSION),)
include $(TOP)Make.config.$(TARGET)
endif

# If we don't do this, GCC 4.2.3/4.3.0 somehow doesn't figure out they're
# system headers (i.e. -Wno-system-headers doesn't work) despite <> includes
BOOST_CXXFLAGS:=$(BOOST_CXXFLAGS:-I%=-isystem %)
QT_CXXFLAGS:=$(QT_CXXFLAGS:-I%=-isystem %)
GSTREAMER_CXXFLAGS:=$(GSTREAMER_CXXFLAGS:-I%=-isystem %)
TAGLIB_CXXFLAGS:=$(TAGLIB_CXXFLAGS:-I%=-isystem %)

ifeq ($(DONE_FLAGS),)

DONE_FLAGS:=1

CFLAGS += -DLOCALSTATEDIR=\"$(localstatedir)\" -DCHORALE_DATADIR=\"$(datarootdir)\"
CXXFLAGS += -DLOCALSTATEDIR=\"$(localstatedir)\" -DCHORALE_DATADIR=\"$(datarootdir)\" -fno-exceptions -DBOOST_NO_EXCEPTIONS -fno-rtti -DBOOST_NO_TYPEID

ifneq ($(DEBUG),0)
WITH_DEBUG:=1
CFLAGS   += -DDEBUG=1 -DWITH_DEBUG -D_FORTIFY_SOURCE=2 -ggdb -Werror
CXXFLAGS += -DDEBUG=1 -DWITH_DEBUG -D_FORTIFY_SOURCE=2 -ggdb
# -D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC # <-- crashes boost, see #7666
LDFLAGS += -ggdb
STRIP:= :
else
WITH_DEBUG:=0
CFLAGS   += -DDEBUG=0 -fomit-frame-pointer -DNDEBUG -fno-unwind-tables -std=gnu99
CXXFLAGS += -DDEBUG=0 -fomit-frame-pointer -DNDEBUG -fno-unwind-tables
endif

ifneq ($(PROFILE),)
CFLAGS += -fno-omit-frame-pointer -profile -pg -Wl,-static
CXXFLAGS += -fno-omit-frame-pointer -profile -pg -Wl,-static
LIBS += -lstdc++_p -lpthread_p
BOOST_LIBS:= -lboost_thread-profile -lboost_regex-profile
LDFLAGS += -static-libtool-libs -static-libgcc -lstdc++_p
endif

ifeq ($(WIN32),yes)
LDFLAGS += -Wl,--wrap,fopen -Wl,--wrap,rename -Wl,--wrap,unlink -Wl,--wrap,wmemcpy -Wl,--wrap,wmemmove -u ___wrap_wmemmove -u ___wrap_unlink -static
# -Wl,--disable-auto-import
endif

endif

# CXXFLAGS += -Werror

ifneq ($(VERBOSE),)
CC_PRE:=
LD_PRE:=
AR_PRE:=
GEN_PRE:=
RUN_PRE:=
TEST_PRE:=
MOCKING_PRE:=
else
CC_PRE=@echo Compiling $< ;
LD_PRE=@echo Linking $@ ;
AR_PRE=@echo Archiving $@ ;
GEN_PRE=@echo Generating $@ ;
RUN_PRE=@echo Running $@ ;
TEST_PRE=@echo Testing $< ;
MOCKING_PRE=@echo Mocking $< ;
endif

# Escape any dots in $(TOP) so they don't act as sed wildcards
ifeq ($(TOP_PATTERN),)
TOP_PATTERN:=$(subst .,\.,$(TOP))
endif

ifeq ($(ABSTOP),)
ABSTOP:=`readlink -f ./$(TOP)`
endif

%:: RCS/%,v

%:: RCS/%

%:: s.%

%:: SCCS/s.%

# These rules are used for files autogenerated per-target (in the
# obj-XXX directories).

%.lo: %.cpp
	$(CC_PRE)$(LIBTOOL) --tag=CXX --mode=compile --silent \
		$(CXX) $(CXXFLAGS) -I$(TOP). \
		-c $< -o $@ -MD -MP
	@sed -e "s| $(TOP_PATTERN)\([a-z.,]\)| \$$\(TOP\)\1|g" \
		      -e "s|^$(TOP_PATTERN)\([a-z.,]\)|\$$\(TOP\)\1|g" \
		      -e "s|$(ABSTOP)/|\$$\(TOP\)|g" \
		      -e "s| [^ ]*.cpp||g" \
		< $*.d > $*.dd
	@mv $*.dd $@.dep
	@rm $*.d

%.o: %.cpp
	$(CC_PRE)$(CXX) $(CXXFLAGS) -I$(TOP). \
		-c $< -o $@ -MD -MP
	@sed -e "s| $(TOP_PATTERN)\([a-z.,]\)| \$$\(TOP\)\1|g" \
		      -e "s|^$(TOP_PATTERN)\([a-z.,]\)|\$$\(TOP\)\1|g" \
		      -e "s|$(ABSTOP)/|\$$\(TOP\)|g" \
		< $*.d > $*.dd
	@mv $*.dd $*.dep
	@rm $*.d

%.o: %.c
	$(CC_PRE)$(CC) $(CFLAGS) -I$(TOP). \
		-c $< -o $@ -MD -MP
	@sed -e "s| $(TOP_PATTERN)\([a-z.,]\)| \$$\(TOP\)\1|g" \
		      -e "s|^$(TOP_PATTERN)\([a-z.,]\)|\$$\(TOP\)\1|g" \
		      -e "s|$(ABSTOP)/|\$$\(TOP\)|g" \
		< $*.d > $*.dd
	@mv $*.dd $*.dep
	@rm $*.d

# Qt meta-object-compiler
$(TOP)$(DIR)$(TARGETDIR)%.moc.cpp: $(TOP)$(DIR)%.h $(MOC)
	@mkdir -p $(dir $@)
	$(MOCKING_PRE)$(MOC) $< -o $@ $(MOCFLAGS)

.PRECIOUS: $(TOP)$(DIR)$(TARGETDIR)%.moc.cpp

$(TOP)$(DIR)$(TARGETDIR)%.res.o: $(TOP)$(DIR)%.rc
	@mkdir -p $(dir $@)
	$(CC_PRE)$(WINDRES) -i $< -o $@ -O coff

$(TOP)$(DIR)$(TARGETDIR)%.lo: $(TOP)$(DIR)%.mm
	@mkdir -p $(dir $@)
	$(CC_PRE)$(LIBTOOL) --tag=OBJC --mode=compile --silent \
		$(OBJCXX) $(OBJCXXFLAGS) -I$(TOP). -c $< -o $@ \
		-MD -MF $@.d -MT $@ -MP
	@sed -e "s| $(TOP_PATTERN)\([a-z.,]\)| \$$\(TOP\)\1|g" \
		      -e "s|^$(TOP_PATTERN)\([a-z.,]\)|\$$\(TOP\)\1|g" \
		      -e "s|$(ABSTOP)/|\$$\(TOP\)|g" \
		< $@.d > $@.dd
	@mv $@.dd $@.dep
	@rm $@.d

$(TOP)$(DIR)$(TARGETDIR)%.lo: $(TOP)$(DIR)%.cpp
	@mkdir -p $(dir $@)
	$(CC_PRE)$(LIBTOOL) --tag=CXX --mode=compile --silent \
		$(CXX) $(CXXFLAGS) -I$(TOP). -c $< -o $@ \
		-MD -MF $@.d -MT $@ -MP
	@sed -e "s| $(TOP_PATTERN)\([a-z.,]\)| \$$\(TOP\)\1|g" \
		      -e "s|^$(TOP_PATTERN)\([a-z.,]\)|\$$\(TOP\)\1|g" \
		      -e "s|$(ABSTOP)/|\$$\(TOP\)|g" \
		< $@.d > $@.dd
	@mv $@.dd $@.dep
	@rm $@.d

$(TOP)$(DIR)$(TARGETDIR)%.lo: $(TOP)$(DIR)%.c
	@mkdir -p $(dir $@)
	$(CC_PRE)$(LIBTOOL) --tag=CXX --mode=compile --silent \
		$(CC) $(CFLAGS) -I$(TOP). -c $< -o $@ \
		-MD -MF $@.d -MT $@ -MP
	@sed -e "s| $(TOP_PATTERN)\([a-z.,]\)| \$$\(TOP\)\1|g" \
		      -e "s|^$(TOP_PATTERN)\([a-z.,]\)|\$$\(TOP\)\1|g" \
		      -e "s|$(ABSTOP)/|\$$\(TOP\)|g" \
		< $@.d > $@.dd
	@mv $@.dd $@.dep
	@rm $@.d

$(TOP)$(DIR)$(TARGETDIR)%__$(TEST_SUFFIX)$(DOTEXE): $(TOP)$(DIR)%.cpp
	@mkdir -p $(dir $@)
	$(CC_PRE)$(LIBTOOL) --tag=CXX --mode=compile --silent \
		$(CXX) $(CXXFLAGS) -fprofile-arcs -ftest-coverage \
		-I$(TOP). -DTEST -DSRCROOT=\"$(SRCROOT)\" -c $< -o $@.lo \
		-MD -MF $@.d -MT $@ -MP
	@sed -e "s| $(TOP_PATTERN)\([a-z.,]\)| \$$\(TOP\)\1|g" \
		      -e "s|^$(TOP_PATTERN)\([a-z.,]\)|\$$\(TOP\)\1|g" \
		      -e "s|$(ABSTOP)/|\$$\(TOP\)|g" \
		< $@.d > $@.dd
	@mv $@.dd $@.dep
	@rm $@.d
	$(LD_PRE)$(LIBTOOL) --tag=CXX --mode=link --silent \
		$(CXX) $(CXXFLAGS) $(LDFLAGS) -fprofile-arcs -ftest-coverage \
		$@.lo $(filter %.la,$^) $(TEST_LIBS) $(LIBS) -lgcov -o $@ -Wl,-Map,$@.map
	$(TEST_PRE)$(TEST_RUN) $@ || ( echo $@ FAILED ; mv -f $@ $@.fail ; false )
	@if [ -f $(dir $@).libs/$(notdir $@).gcda ]; then \
		$(GCOV) -o $(dir $@).libs/$(notdir $@).cpp $< > $@.gcov.txt ; \
		rm -f *[^c]??.gcov ; \
		mv $(notdir $<).gcov  $(notdir $<).gcov0 ; \
		mv $(notdir $<).gcov0 $(dir $@)/../$(notdir $<).gcov ; \
		grep -C1 $< $@.gcov.txt \
			| grep executed | head -n 1 \
			| sed -e "s,^,Covered $<: ," -e 's/ted:/ted: /' ; \
	fi

%.s: %.cpp
	$(CXX) $(CXXFLAGS) $(TAGLIB_CXXFLAGS) $(BOOST_CXXFLAGS) -I./$(TOP) -S $< -o $@ -DTEST

%.i: %.cpp
	$(CXX) $(CXXFLAGS) -I./$(TOP) -E -dD -C $< -o $@ $(QT_CXXFLAGS) \
		$(GSTREAMER_CXXFLAGS)
